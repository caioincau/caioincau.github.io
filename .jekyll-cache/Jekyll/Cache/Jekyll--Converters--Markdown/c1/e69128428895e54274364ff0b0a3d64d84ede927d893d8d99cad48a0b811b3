I"æ<h1 id="performance-webpack---parte-2">Performance Webpack - Parte 2</h1>

<p>Vamos dar continuidade no <a href="https://caio.ninja/performance-webpack-parte-1/">post anterior</a> sobre performance em aplica√ß√µes que usam Webpack.</p>

<p>Nesse segundo post iremos cobrir a parte de melhoria de cache e separa√ß√£o de c√≥digo.</p>

<h2 id="versionamento-de-cache">Versionamento de cache</h2>

<p>N√≥s podemos tirar proveito do <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=pt-br">cache do navegador</a>, mas para isso, precisamos invalidar o cache ap√≥s realizarmos mudan√ßas em nosso c√≥digo, o meio mais comum de fazer isso, √© mudando os nomes do arquivos.</p>

<p>Antigamente t√≠nhamos o applications_v1.js, applications_v2.js e assim por diante.</p>

<p>Com o webpack podemos gerar um hash autom√°tico a cada build que houver altera√ß√µes e usar essa vari√°vel gerada, para concatenar no nome dos arquivos:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./index.js</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bundle.[chunkhash].js</span><span class="dl">'</span><span class="p">,</span>
            <span class="c1">// ‚Üí bundle.8e0d62a03.js</span>
    <span class="p">},</span>
<span class="p">};</span></code></pre></figure>

<p>Caso voc√™ use o HtmlWebpackPlugin, ele ir√° trocar as refer√™ncias ao seu bundle no html, pelo novo valor, j√° com o hash concatenado.</p>

<h2 id="cache-dos-vendors">Cache dos vendors</h2>

<p>Tente extrair as libs de vendors em um bundle separado, isso √© bom para paralelizar as requisi√ß√µes e tamb√©m √© uma √≥tima estrat√©gia de cache, pois seu vendors tende a mudar menos que sua aplica√ß√£o, seu hash/cache pode mudar menos.</p>

<p>Atrav√©s do CommonsChunkPlugin podemos dar um nome para o chunk de c√≥digo e passar uma fun√ß√£o que ensina quais arquivos dever√£o estar em cada chunk.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">CommonsChunkPlugin</span><span class="p">({</span>
            <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">vendor</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">minChunks</span><span class="p">:</span> <span class="nx">module</span> <span class="o">=&gt;</span> <span class="nx">module</span><span class="p">.</span><span class="nx">context</span> <span class="o">&amp;&amp;</span>
                <span class="nx">module</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">node_modules</span><span class="dl">'</span><span class="p">),</span>
        <span class="p">}),</span>
    <span class="p">],</span>
<span class="p">};</span></code></pre></figure>

<p>Mas precisamos carregar tudo de uma vez?</p>

<h2 id="lazy-loading">Lazy Loading</h2>

<p>Lazy loading √© uma t√©cnica de desenvolvimento, na qual voc√™ tr√°s os arquivos sob demanda, de forma ‚Äúpregui√ßosa‚Äù.</p>

<p>Sendo assim, n√£o travamos o carregamento inicial da p√°gina para o usu√°rio.</p>

<p>Podemos fazer isso com o uso da fun√ß√£o <code class="language-plaintext highlighter-rouge">import</code>, ela faz a requisi√ß√£o para trazer o arquivo e retorna uma <code class="language-plaintext highlighter-rouge">promisse</code>, que ao ser resolvida, possui as fun√ß√µes do script importado.</p>

<p>Vamos supor que n√≥s temos um p√°gina com uma se√ß√£o de coment√°rios, mas n√£o queremos trazer os coment√°rios de forma autom√°tica, queremos que os coment√°rios sejam carregados apenas quando clicar em ‚Äúver coment√°rios‚Äù.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">onShowCommentsClick</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">./comments</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">comments</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">comments</span><span class="p">.</span><span class="nx">renderComments</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">});</span></code></pre></figure>

<p>Com o c√≥digo acima, o arquivo de script <code class="language-plaintext highlighter-rouge">comments</code> s√≥ iria ser carregado no <code class="language-plaintext highlighter-rouge">click</code>.</p>

<h2 id="code-split">Code Split</h2>
<p>Podemos dividir nosso c√≥digo em mais do que somente depend√™ncias e aplica√ß√£o,  na verdade, podemos dividir nossa aplica√ß√£o em quantas partes precisarmos, por exemplo, cada rota pode possuir seu c√≥digo especifico.</p>

<p>Para isso, √© s√≥ adicionarmos mais entry points no nosso <code class="language-plaintext highlighter-rouge">webpack.config.js</code>.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// webpack.config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">home</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/Home/index.js</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">article</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/Article/index.js</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">profile</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./src/Profile/index.js</span><span class="dl">'</span>
    <span class="p">},</span>
<span class="p">};</span></code></pre></figure>

<p>Caso voc√™ use Vue.js, o Code split por rotas <a href="https://router.vuejs.org/en/advanced/lazy-loading.html">pode ser mais simples</a>, o mesmo vale para <a href="https://reactjs.org/docs/code-splitting.html">React</a></p>

<h2 id="conclus√£o">Conclus√£o</h2>

<p>Finalizo por aqui o post de hoje, iremos ter uma terceira parte sobre monitoria da aplica√ß√£o, para garantir que suas melhorias n√£o sejam descartadas sem que voc√™ perceba.</p>
:ET
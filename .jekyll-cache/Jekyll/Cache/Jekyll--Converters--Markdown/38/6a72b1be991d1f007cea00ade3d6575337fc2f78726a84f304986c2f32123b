I"OU<h1 id="performance-webpack">Performance Webpack</h1>

<p>Essa é a primeira de um série de posts sobre performance Webpack, falei sobre este tema no JSSP, foi uma das talks que eu percebi mais interesse das pessoas.</p>

<p>Por isso acho justo compartilhar o tema em formato de blog posts, para disseminar esse conhecimento para quem não teve a chance de ir no meetup.</p>

<p>Sem mais delongas, vamos começar.</p>

<p>Os posts irão abordar os seguintes temas:</p>

<ul>
  <li>Diminuir o tamanho dos arquivos no Front-End</li>
  <li>Melhorias de cache</li>
  <li>Monitorar e analisar a aplicação</li>
</ul>

<p>Vamos começar por:</p>

<h2 id="diminuir-o-tamanho-dos-arquivos-no-front-end">Diminuir o tamanho dos arquivos no Front-End</h2>

<h3 id="ligue-a-minificação">Ligue a minificação</h3>

<p>O primeiro passo e mais básico, é ligar a minificação, pode parecer algo batido, mas ainda é possível encontrar sites sem esta otimização.
Para que nunca usou minificação, o processo básicamente remove os espaços em branco, além de substituir os simbolos, por simbolos menores, economizando kbytes.
O processo é simples usando o plugin UglifyJS:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">(),</span>
    <span class="p">],</span>
<span class="p">};</span></code></pre></figure>

<h4 id="código-que-escrevemos">Código que escrevemos</h4>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// comments.js</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./comments.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Rendered!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<h4 id="código-após-compile-do-webpack-com-babel">Código após compile do Webpack com babel</h4>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// bundle.js (part of)</span>
<span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span><span class="p">;</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">__webpack_exports__</span><span class="p">,</span> <span class="dl">"</span><span class="s2">__esModule</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="cm">/* harmony export (immutable) */</span> <span class="nx">__webpack_exports__</span><span class="p">[</span><span class="dl">"</span><span class="s2">render</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="nx">render</span><span class="p">;</span>
<span class="cm">/* harmony import */</span> <span class="kd">var</span> <span class="nx">__WEBPACK_IMPORTED_MODULE_0__comments_css__</span> <span class="o">=</span> <span class="nx">__webpack_require__</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="cm">/* harmony import */</span> <span class="kd">var</span> <span class="nx">__WEBPACK_IMPORTED_MODULE_0__comments_css_js___default</span> <span class="o">=</span>
<span class="nx">__webpack_require__</span><span class="p">.</span><span class="nx">n</span><span class="p">(</span><span class="nx">__WEBPACK_IMPORTED_MODULE_0__comments_css__</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Rendered!</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<h4 id="código-após-o-uglifyjs">Código após o UglifyJS</h4>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// minified bundle.js (part of)</span>
<span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span><span class="p">;</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Rendered!</span><span class="dl">"</span><span class="p">)}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="dl">"</span><span class="s2">__esModule</span><span class="dl">"</span><span class="p">,{</span><span class="na">value</span><span class="p">:</span><span class="o">!</span><span class="mi">0</span><span class="p">}),</span><span class="nx">n</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">r</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">n</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span></code></pre></figure>

<h3 id="minifique-seu-css">Minifique seu CSS</h3>

<p>Podemos realizar um processo similar com nosso CSS, mas para isso, precisamos ativar essa opção no seu loader.</p>

<p>Para os não familiarizados com webpack, os loaders são módulos que ensinam ao webpack, como lidar com cada tipo de arquivo.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// webpack.config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
            <span class="na">use</span><span class="p">:</span> <span class="p">[</span>
                <span class="dl">'</span><span class="s1">style-loader</span><span class="dl">'</span><span class="p">,</span>
                <span class="p">{</span> <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">css-loader</span><span class="dl">'</span><span class="p">,</span> <span class="na">options</span><span class="p">:</span> <span class="p">{</span> <span class="na">minimize</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">},</span>
            <span class="p">],</span>
        <span class="p">},</span>
        <span class="p">],</span>
    <span class="p">},</span>
<span class="p">};</span></code></pre></figure>

<h3 id="ligue-o-node_env-em-modo-de-produção">Ligue o NODE_ENV em modo de produção</h3>

<p>Ligue o <code class="highlighter-rouge">NODE_ENV=production</code></p>

<p>Muitas das nossas dependências, usam o NODE_ENV para verificar se aplicam ou não otimizações como importar o .map, ou remover console.log.</p>

<p>Parece algo comum, mas muitas pessoas acabam não se preocupando com isso, ou mudam o padrão, como ‘production’, é uma String que não uma váriavel “extraída”, mudar esse nome pode alterar o comportamento das nossas dependências.</p>

<p>A maioria dos frameworks modernos como React e VueJS confiam nessa variável para otimizar o build.</p>

<p>Mas é possível melhorar ainda mais esse processo.</p>

<h3 id="usando-o-defineplugin">Usando o DefinePlugin</h3>

<p>Podemos usar o <code class="highlighter-rouge">webpack.DefinePlugin</code> para substituir as ocorrências de <code class="highlighter-rouge">process.env.NODE_ENV</code> para <code class="highlighter-rouge">'production'</code></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// webpack.config.js</span>
<span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">DefinePlugin</span><span class="p">({</span>
    <span class="dl">'</span><span class="s1">process.env.NODE_ENV</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">"production"</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">}),</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">UglifyJsPlugin</span><span class="p">(),</span>
<span class="p">],</span>
<span class="p">};</span></code></pre></figure>

<p>Deste modo o UglifyJS vai avaliar uma expressão como essa do Vue:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="nx">camelize</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="kc">null</span> <span class="p">};</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="dl">"</span><span class="s2">production</span><span class="dl">"</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">production</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">warn</span><span class="p">(</span><span class="dl">'</span><span class="s1">props must be strings when using array syntax.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>E automáticamente remover o else que retornará false, ou seja, deadcode.</p>

<p>Transformando em:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="nx">camelize</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="kc">null</span> <span class="p">};</span>
<span class="p">}</span></code></pre></figure>

<p>Ainda falando em bibliotecas externas, podemos otimizar nossos imports também.</p>

<h3 id="use-es-imports">Use ES imports!</h3>

<p>Quando você usa ES modules, o Webpack é capaz de fazer o famoso <code class="highlighter-rouge">'tree-shaking'</code> e trazer somente o necessário dos arquivos importados.</p>

<p>Vamos pegar o seguinte código de exemplo:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// comments.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">render</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">Rendered!</span><span class="dl">'</span><span class="p">;</span> <span class="p">};</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">commentRestEndpoint</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">/rest/comments</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// index.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">render</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./comments.js</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">render</span><span class="p">();</span></code></pre></figure>

<p>Agora vamos ver como ficam os imports após compilado:</p>

<p>Veja que ele remove a função <code class="highlighter-rouge">commentRestEndpoint</code> ao perceber que ela, apesar de estar no arquivo, não foi utilizada.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="dl">"</span><span class="s2">Rendered!</span><span class="dl">"</span><span class="p">};</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">r</span><span class="p">})</span></code></pre></figure>

<p>Vale lembrar que se você usa babel, é necessário passar <code class="highlighter-rouge">{ modules: false }</code> no env, para evitar o uso de CommonJS.</p>

<p>Falamos de script, falamos de css, mas ainda temos um grande vilão no nosso bundle size, as imagens!</p>

<h3 id="imagens-inline">Imagens inline</h3>

<p>Podemos tratar imagens pequenas, para deixá-las inline em formato base64.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// webpack.config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.(</span><span class="sr">jpe</span><span class="se">?</span><span class="sr">g|png|gif</span><span class="se">)</span><span class="sr">$/</span><span class="p">,</span>
        <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">url-loader</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// Inline files smaller than 10 kB (10240 bytes)</span>
        <span class="na">limit</span><span class="p">:</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">],</span>
<span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p>No caso acima, transformamos em inline, qualquer imagem menor que 10kb, evitando por exemplo que várias request sejam abertas apenas para trazer ícones.</p>

<h3 id="lib-hell">LIB HELL</h3>

<p>Em média, mais da metade do JavaScript de uma aplicação vem de suas dependências, e parte disso pode ser simplesmente desnecessário.</p>

<p>Vamos citar alguns exemplos básicos, o Lodash tem 72 KB minificado, mas vamos chutar alto, quantos métodos dele vocês usam? 15, 20?</p>

<p>Isso significa que temos algo em torno de 65kb não usados, o Lodash já suporta imports através de ES modules, assim ativando o three-shaking.</p>

<p>Outro grande exemplo é o moment.js, como sabemos que a API de datas do JS não é das mais satisfatórias, o moment é uma depedência comum nas aplicações de hoje.</p>

<p>Ele possui 223 KB minificado, o que no projeto que trabalho seria mais da metade do nosso projeto, porém 170kb são de arquivos de locale, boa parte deles podem ser excluídos e podemos fazer isso através do webpack:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">MomentLocalesPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">moment-locales-webpack-plugin</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// To strip all locales except “en”</span>
        <span class="k">new</span> <span class="nx">MomentLocalesPlugin</span><span class="p">(),</span>

        <span class="c1">// Or: To strip all locales except “en”, “es-us” and “ru”</span>
        <span class="c1">// (“en” is built into Moment and can’t be removed)</span>
        <span class="k">new</span> <span class="nx">MomentLocalesPlugin</span><span class="p">({</span>
            <span class="na">localesToKeep</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">es-us</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">ru</span><span class="dl">'</span><span class="p">],</span>
        <span class="p">}),</span>
    <span class="p">],</span>
<span class="p">};</span></code></pre></figure>

<p>Você pode ver essa e outras técnicas de otimização no <a href="https://github.com/GoogleChromeLabs/webpack-libs-optimizations">Chrome Labs</a></p>

<h3 id="concatenação-de-es-modules">Concatenação de ES modules</h3>

<p>Ligue a concatenação de ES modules, quando o Webpack usava CommonJS, lá no Webpack 1, cada módulo precisava ser englobado dentro de uma função, hoje, com o uso dos ES Modules a mesma função pode englobar vários módulos.</p>

<p>Vale lembrar que ligar esta melhoria iria quebrar os módulos de hot-reload, por isso, essa configuração só deve ser usada em produção.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">optimize</span><span class="p">.</span><span class="nx">ModuleConcatenationPlugin</span><span class="p">(),</span>
<span class="p">],</span>
<span class="p">};</span></code></pre></figure>

<h3 id="conclusão">Conclusão</h3>

<p>Por hoje é só pessoal, com isso cobrimos toda a parte de melhoria do nosso lado do código.</p>

<p>Na próxima parte iremos abordar as melhorias de cache através do Webpack.</p>

<p>Fiquem a vontade para comentar e sugerir alterações, abraços.</p>
:ET